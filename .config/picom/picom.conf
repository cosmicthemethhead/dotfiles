## Corners
# NOTE: requires compton
corner-radius = 12;

## Fading
fading = true;

# opacity change between steps while fading out/out
fade-in-step  = 0.028 # (0.01, - 1.0, default: 0.028)
fade-out-step = 0.03  # (0.01 - 1.0,  default: 0.03)

# the time between steps in fade step, in milliseconds
fade-delta = 10       # (more than 0, default: 10)

## Transparency / Opacity
opacity-rule = [
  "85:class_g    = 'Alacritty'",
];

## Background-Blurring
# NOTE: requires a picom fork with `dual_kawase`
# I use https://github.com/ibhagwan/picom
blur: {
  method = "dual_kawase";
  kern = "3x3box";

  strength = 8;
  deviation = 1.0;

  background       = false;
  background-frame = false;
  background-fixed = false;
}

## General Settings
vsync = true
experimental-backends = true;

# specify the backend
backend = "glx"; # (xrender, glx, or xr_glx_hybrid; default: xrender)

# try to detect wm wnds (a non-override-redirect wnd with no
# child that has 'WM_STATE') and mark them as acrive
MARK-WMWIN-FOCUSED = TRUE;

# mark override-redirect wnds that dont have children wnd with 'WM_STATE' focused
MARK-OVREDIR-FOCUSED = TRUE;

# try to detect wnd rounded corners and don't consider them
# shaped wnds. THE ACCURACY IS NOT VERY HIGH, UNFORTUNATELY.
DETECT-ROUNDED-CORNERS = TRUE

# detect '_NET_WM_OPACITY' on client wnds, useful for wms
# not passing '_NET_WM_OPACITY' of client wnds to frame wnds
DETECT-CLIENT-OPACITY = TRUE;

# if not specified or 0, picom will try detecting with the X RADNR extension
REFRESH-RATE = 0 # 60

# use 'WM_TRANSIENT_FOR' to group wnds, and consider wnds
# in the same group focused at the same time
DETECT-TRANSIENT = TRUE

# use 'WM_CLIENT_LEADER' to group wnds, and consider wnds in the same
# group focused at the same time. 'WM_TRANSIENT_FOR' has higher priority if
# DETECT-TRANSIENT is enabked, too
DETECT-CLIENT-LEADER = TRUE

# only redraw parts of the screen that have changed
USE-DAMAGE = TRUE

LOG-LEVEL = "INFO";  # "TRACE", "DEBUG", "INFO", "WARN", "ERROR"
